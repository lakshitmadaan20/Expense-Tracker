[{"C:\\speechly\\src\\index.js":"1","C:\\speechly\\src\\App.js":"2","C:\\speechly\\src\\components\\Details\\Details.jsx":"3","C:\\speechly\\src\\components\\Details\\styles.js":"4","C:\\speechly\\src\\styles.js":"5","C:\\speechly\\src\\components\\Main\\Main.jsx":"6","C:\\speechly\\src\\components\\Main\\styles.js":"7","C:\\speechly\\src\\components\\Main\\Form\\Form.jsx":"8","C:\\speechly\\src\\components\\Main\\Form\\styles.js":"9","C:\\speechly\\src\\components\\Main\\List\\List.jsx":"10","C:\\speechly\\src\\components\\Main\\List\\styles.js":"11","C:\\speechly\\src\\context\\context.js":"12","C:\\speechly\\src\\context\\contextReducer.js":"13","C:\\speechly\\src\\utils\\formatDate.js":"14","C:\\speechly\\src\\constants\\categories.js":"15","C:\\speechly\\src\\useTransactions.js":"16","C:\\speechly\\src\\components\\Snackbar\\styles.js":"17","C:\\speechly\\src\\components\\InfoCard.jsx":"18","C:\\speechly\\src\\components\\Snackbar\\CustomizedSnackbar.jsx":"19"},{"size":413,"mtime":1616570111086,"results":"20","hashOfConfig":"21"},{"size":1441,"mtime":1616571799991,"results":"22","hashOfConfig":"21"},{"size":734,"mtime":1616489178625,"results":"23","hashOfConfig":"21"},{"size":245,"mtime":1615969195112,"results":"24","hashOfConfig":"21"},{"size":580,"mtime":1615968701824,"results":"25","hashOfConfig":"21"},{"size":1332,"mtime":1616571702735,"results":"26","hashOfConfig":"21"},{"size":512,"mtime":1615969791400,"results":"27","hashOfConfig":"21"},{"size":4970,"mtime":1616571952677,"results":"28","hashOfConfig":"21"},{"size":245,"mtime":1615970347670,"results":"29","hashOfConfig":"21"},{"size":1579,"mtime":1616487408245,"results":"30","hashOfConfig":"21"},{"size":414,"mtime":1615973427691,"results":"31","hashOfConfig":"21"},{"size":974,"mtime":1616570393857,"results":"32","hashOfConfig":"21"},{"size":625,"mtime":1616485983878,"results":"33","hashOfConfig":"21"},{"size":319,"mtime":1616487306581,"results":"34","hashOfConfig":"21"},{"size":1695,"mtime":1616487501194,"results":"35","hashOfConfig":"21"},{"size":1103,"mtime":1616488842227,"results":"36","hashOfConfig":"21"},{"size":204,"mtime":1616570836176,"results":"37","hashOfConfig":"21"},{"size":464,"mtime":1616571833770,"results":"38","hashOfConfig":"21"},{"size":795,"mtime":1616571926950,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ltmjfh",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\speechly\\src\\index.js",[],"C:\\speechly\\src\\App.js",[],"C:\\speechly\\src\\components\\Details\\Details.jsx",["81"],"import React from 'react'\r\nimport {Card, CardHeader, CardContent, Typography} from '@material-ui/core'\r\nimport { Bar, Doughnut } from 'react-chartjs-2'\r\n\r\nimport useStyles from './styles'\r\nimport useTransactions from '../../useTransactions';\r\n\r\nconst Details = ({ title }) => {\r\n     \r\n    const {total, chartData} = useTransactions(title)\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={title === 'Income' ? classes.income : classes.expense}>\r\n            <CardHeader title={title}/>\r\n            <CardContent>\r\n              <Typography variant=\"h5\">INR {total} </Typography>\r\n              <Doughnut data={chartData} />\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Details;","C:\\speechly\\src\\components\\Details\\styles.js",[],"C:\\speechly\\src\\styles.js",[],"C:\\speechly\\src\\components\\Main\\Main.jsx",[],"C:\\speechly\\src\\components\\Main\\styles.js",[],"C:\\speechly\\src\\components\\Main\\Form\\Form.jsx",["82"],"import React, {useState, useEffect, useContext} from 'react'\r\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport useStyles from './styles'\r\nimport { ExpenseTrackerContext } from '../../../context/context'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport formatDate from '../../../utils/formatDate';\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\r\nimport {useSpeechContext} from '@speechly/react-client'\r\nimport CustomizedSnackbar from '../../Snackbar/CustomizedSnackbar';\r\n\r\n\r\nconst initialState = {\r\n    amount: '',\r\n    category: '',\r\n    type: 'Income',\r\n    date: formatDate(new Date()),\r\n}\r\n\r\nconst Form = () => {\r\n    \r\n    const [formData, setFormData] = useState(initialState)\r\n    const { addTransaction } = useContext(ExpenseTrackerContext)\r\n    const [open, setOpen] = React.useState(false);\r\n    const {segment} = useSpeechContext()\r\n    \r\n    const createTransaction = () => {\r\n        const transaction = {...formData, amount: Number(formData.amount), id: uuidv4()}\r\n        addTransaction(transaction)\r\n        setFormData(initialState);\r\n    }\r\n    \r\n    const classes = useStyles();\r\n\r\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories\r\n    \r\n\r\n    useEffect(() => {\r\n        if (segment) {\r\n          if (segment.intent.intent === 'add_expense') {\r\n            setFormData({ ...formData, type: 'Expense' });\r\n          } else if (segment.intent.intent === 'add_income') {\r\n            setFormData({ ...formData, type: 'Income' });\r\n          } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n            return createTransaction();\r\n          } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\r\n            return setFormData(initialState);\r\n          }\r\n    \r\n          segment.entities.forEach((s) => {\r\n            const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\r\n    \r\n            switch (s.type) {\r\n              case 'amount':\r\n                setFormData({ ...formData, amount: s.value });\r\n                break;\r\n              case 'category':\r\n                if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n                  setFormData({ ...formData, type: 'Income', category });\r\n                } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\r\n                  setFormData({ ...formData, type: 'Expense', category });\r\n                }\r\n                break;\r\n              case 'date':\r\n                setFormData({ ...formData, date: s.value });\r\n                break;\r\n              default:\r\n                break;\r\n            }\r\n          });\r\n    \r\n          if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\r\n            createTransaction();\r\n          }\r\n        }\r\n      }, [segment]);\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n           <CustomizedSnackbar open={open} setOpen={setOpen} />\r\n            <Grid item xs={12}>\r\n                <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n                    {segment && (\r\n                        <>\r\n                            {segment.words.map((w) => w.value).join(\" \")}\r\n                        </>    \r\n                    )}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Type</InputLabel>\r\n                    <Select value={formData.type} onChange={(e) => setFormData({...formData, type: e.target.value})}>\r\n                        <MenuItem value=\"Income\">Income</MenuItem>\r\n                        <MenuItem value=\"Expense\">Expense</MenuItem>\r\n\r\n                    </Select>\r\n             </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel>Category</InputLabel>\r\n                    <Select value={formData.category} onChange={(e) => setFormData({...formData, category: e.target.value})}>\r\n                    {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\r\n                    </Select>\r\n               </FormControl>\r\n            </Grid>\r\n\r\n            <Grid item xs={6}>\r\n            <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} fullWidth />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n           <TextField fullWidth label=\"Date\" type=\"date\" value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\r\n          </Grid>\r\n         <Button className={classes.button} variant=\"contained\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\r\n         </Grid>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","C:\\speechly\\src\\components\\Main\\Form\\styles.js",[],"C:\\speechly\\src\\components\\Main\\List\\List.jsx",[],"C:\\speechly\\src\\components\\Main\\List\\styles.js",[],"C:\\speechly\\src\\context\\context.js",[],"C:\\speechly\\src\\context\\contextReducer.js",[],"C:\\speechly\\src\\utils\\formatDate.js",["83"],"export default (date) => {\r\n    const d = new Date(date);\r\n    let month = `${d.getMonth() + 1}`;\r\n    let day = `${d.getDate()}`;\r\n    const year = d.getFullYear();\r\n  \r\n    if (month.length < 2) { month = `0${month}`; }\r\n    if (day.length < 2) { day = `0${day}`; }\r\n  \r\n    return [year, month, day].join('-');\r\n  };","C:\\speechly\\src\\constants\\categories.js",[],"C:\\speechly\\src\\useTransactions.js",[],"C:\\speechly\\src\\components\\Snackbar\\styles.js",[],"C:\\speechly\\src\\components\\InfoCard.jsx",[],"C:\\speechly\\src\\components\\Snackbar\\CustomizedSnackbar.jsx",[],{"ruleId":"84","severity":1,"message":"85","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":13},{"ruleId":"88","severity":1,"message":"89","line":75,"column":10,"nodeType":"90","endLine":75,"endColumn":19,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":1,"nodeType":"94","endLine":11,"endColumn":5},"no-unused-vars","'Bar' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["95"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"96","fix":"97"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"98","text":"99"},[2951,2960],"[createTransaction, formData, segment]"]